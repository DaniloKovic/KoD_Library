// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using KoD_Library_HCI_Core6.Models.Entities;

namespace KoD_Library_HCI_Core6.Data
{
    public partial class Kod_LibraryContext : DbContext
    {
        public Kod_LibraryContext()
        {
        }

        public Kod_LibraryContext(DbContextOptions<Kod_LibraryContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Autor> Autor { get; set; }
        public virtual DbSet<Iznajmljuje> Iznajmljuje { get; set; }
        public virtual DbSet<Knjiga> Knjiga { get; set; }
        public virtual DbSet<Nalog> Nalog { get; set; }
        public virtual DbSet<Tipnaloga> Tipnaloga { get; set; }
        public virtual DbSet<Zanr> Zanr { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_0900_ai_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<Autor>(entity =>
            {
                entity.ToTable("autor");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ImePrezime, "autor_imePrezime");

                entity.Property(e => e.ImePrezime)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("imePrezime");
            });

            modelBuilder.Entity<Iznajmljuje>(entity =>
            {
                entity.ToTable("iznajmljuje");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_unicode_ci");

                entity.HasIndex(e => e.KnjigaId, "fk_iznajmljuje_knjiga1_idx");

                entity.HasIndex(e => e.NalogId, "fk_iznajmljuje_nalog1_idx");

                entity.Property(e => e.DatumDo).HasColumnName("datumDo");

                entity.Property(e => e.DatumOd).HasColumnName("datumOd");

                entity.Property(e => e.IsVracena).HasColumnName("isVracena");

                entity.Property(e => e.KnjigaId).HasColumnName("knjigaId");

                entity.Property(e => e.NalogId).HasColumnName("nalogId");

                entity.HasOne(d => d.Knjiga)
                    .WithMany(p => p.Iznajmljuje)
                    .HasForeignKey(d => d.KnjigaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_iznajmljuje_knjiga");

                entity.HasOne(d => d.Nalog)
                    .WithMany(p => p.Iznajmljuje)
                    .HasForeignKey(d => d.NalogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_iznajmljuje_nalog1");
            });

            modelBuilder.Entity<Knjiga>(entity =>
            {
                entity.ToTable("knjiga");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.DostupnaKolicina)
                    .HasColumnName("dostupnaKolicina")
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.GodinaIzdanja)
                    .HasColumnName("godinaIzdanja")
                    .HasDefaultValueSql("'2000'");

                entity.Property(e => e.Kolicina)
                    .HasColumnName("kolicina")
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.Naslov)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("naslov");

                entity.Property(e => e.Opis)
                    .HasMaxLength(255)
                    .HasColumnName("opis")
                    .HasDefaultValueSql("'opis'");

                entity.HasMany(d => d.Autor)
                    .WithMany(p => p.Knjiga)
                    .UsingEntity<Dictionary<string, object>>(
                        "Autorknjiga",
                        l => l.HasOne<Autor>().WithMany().HasForeignKey("AutorId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_knjiga_has_autor_autor1"),
                        r => r.HasOne<Knjiga>().WithMany().HasForeignKey("KnjigaId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_knjiga_has_autor_knjiga1"),
                        j =>
                        {
                            j.HasKey("KnjigaId", "AutorId").HasName("PRIMARY").HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                            j.ToTable("autorknjiga").HasCharSet("utf8mb3").UseCollation("utf8_general_ci");

                            j.HasIndex(new[] { "AutorId" }, "fk_KNJIGA_has_AUTOR_AUTOR1_idx");

                            j.HasIndex(new[] { "KnjigaId" }, "fk_knjiga_has_autor_knjiga1_idx");

                            j.IndexerProperty<uint>("KnjigaId").HasColumnName("knjigaId");

                            j.IndexerProperty<uint>("AutorId").HasColumnName("autorId");
                        });

                entity.HasMany(d => d.Zanr)
                    .WithMany(p => p.Knjiga)
                    .UsingEntity<Dictionary<string, object>>(
                        "Knjigazanr",
                        l => l.HasOne<Zanr>().WithMany().HasForeignKey("ZanrId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_knjiga_has_zanr_zanr1"),
                        r => r.HasOne<Knjiga>().WithMany().HasForeignKey("KnjigaId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_knjiga_has_zanr_knjiga1"),
                        j =>
                        {
                            j.HasKey("KnjigaId", "ZanrId").HasName("PRIMARY").HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                            j.ToTable("knjigazanr").HasCharSet("utf8mb3").UseCollation("utf8_general_ci");

                            j.HasIndex(new[] { "KnjigaId" }, "fk_knjiga_has_zanr_knjiga1_idx");

                            j.HasIndex(new[] { "ZanrId" }, "fk_knjiga_has_zanr_zanr1_idx");

                            j.IndexerProperty<uint>("KnjigaId").HasColumnName("knjigaId");

                            j.IndexerProperty<uint>("ZanrId").HasColumnName("zanrId");
                        });
            });

            modelBuilder.Entity<Nalog>(entity =>
            {
                entity.ToTable("nalog");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_unicode_ci");

                entity.HasIndex(e => e.TipNalogaId, "fk_nalog_tipNaloga1_idx");

                entity.HasIndex(e => e.KorisnickoIme, "korisnickoIme_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.Lozinka, "lozinka_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.BrojTelefona)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("brojTelefona");

                entity.Property(e => e.DatumRegistracije).HasColumnName("datumRegistracije");

                entity.Property(e => e.EMail)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("eMail");

                entity.Property(e => e.ImePrezime)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("imePrezime");

                entity.Property(e => e.KorisnickoIme)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("korisnickoIme");

                entity.Property(e => e.Lozinka)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("lozinka");

                entity.Property(e => e.TipNalogaId).HasColumnName("tipNalogaId");

                entity.Property(e => e.UserTemplate)
                    .HasColumnName("userTemplate")
                    .HasDefaultValueSql("'1'");

                entity.HasOne(d => d.TipNaloga)
                    .WithMany(p => p.Nalog)
                    .HasForeignKey(d => d.TipNalogaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_nalog_tipNaloga1");
            });

            modelBuilder.Entity<Tipnaloga>(entity =>
            {
                entity.ToTable("tipnaloga");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_unicode_ci");

                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("naziv");
            });

            modelBuilder.Entity<Zanr>(entity =>
            {
                entity.ToTable("zanr");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("naziv");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}